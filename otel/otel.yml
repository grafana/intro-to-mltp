# Define the protocols to receive data for.
# See https://opentelemetry.io/docs/collector/configuration/#receivers
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317

  # Defines a Prometheus configuration set.
  prometheus:
    config:
      scrape_configs:
        # Scrape Mimir metrics.
        - job_name: 'mimir'
          static_configs:
            - targets: ['mimir:9009']
              labels:
                service: 'mimir'
                group: 'infrastructure'

        # Scrape Loki metrics.
        - job_name: 'loki'
          static_configs:
            - targets: ['loki:3100']
              labels:
                service: 'loki'
                group: 'infrastructure'

        # Scrape Tempo metrics.
        - job_name: 'tempo'
          static_configs:
            - targets: ['tempo:3200']
              labels:
                service: 'tempo'
                group: 'infrastructure'

        # Scrape Grafana metrics.
        - job_name: 'grafana'
          static_configs:
            - targets: ['grafana:3000']
              labels:
                service: 'grafana'
                group: 'infrastructure'

        # Scrape from the Mythical Server service.
        - job_name: 'mythical-server'
          scrape_interval: 2s
          static_configs:
            - targets: ['mythical-server:4000']
              labels:
                service: 'mythical-server'
                group: 'mythical'

        # Scrape from the Mythical Requester service.
        - job_name: 'mythical-requester'
          scrape_interval: 2s
          static_configs:
            - targets: ['mythical-requester:4001']
              labels:
                service: 'mythical-requester'
                group: 'mythical'

# Define processors to process received data.
# See https://opentelemetry.io/docs/collector/configuration/#processors
processors:
  batch:
  transform:
       # error_mode: ignore
       trace_statements:
         context: resource
         statements:
           - replace_match(attributes["service.name"], "mythical-server", "edge_proxy")

# Define exporters to data stores.
# See https://opentelemetry.io/docs/collector/configuration/#exporters
# Also see https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor#recommended-processors
exporters:
  # Exporter for sending trace data to Tempo.
  otlp/grafana:
    # Send to the locally running Tempo service.
    endpoint: tempo:4317
    # TLS is not enabled for the instance.
    tls:
      insecure: true

  # Exporter for sending Prometheus data to Mimir.
  prometheusremotewrite:
    # Send to the locally running Mimir service.
    endpoint: http://mimir:9009/api/v1/push
    # TLS is not enabled for the instance.
    tls:
      insecure: true

# Define the full service graph for the OpenTelemetry collector.
service:
  # A pipeline can exist for each of the signals received.
  pipelines:
    # Define the trace pipeline.
    traces:
      # Receive from the `otlp` receiver.
      receivers: [otlp]
      # Use the `batch` processor to process received trace spans.
      processors: [transform, batch]
      exporters: [otlp/grafana]

    # Define the metrics pipeline.
    metrics:
      # Receive metrics from the `prometheus` receiver.
      receivers: [prometheus]
      # Use the `batch` processor to process received metrics.
      processors: [batch]
      # Export to the `prometheusremtotewrite` exporter.
      exporters: [prometheusremotewrite]
