version: "2.1"
volumes:
  grafana:
  postgres:
services:
  # The opentelemetry-collector batches and processes traces sent to it.
  opentelemetry-collector:
    image: otel/opentelemetry-collector-contrib
    ports:
      - "12347:12345"
      - "12348:12348"
      - "6832:6832"
      - "55679:55679"
    volumes:
      - ./otel/otel.yml:/etc/otel-collector-config.yml
    command: ["--config=/etc/otel-collector-config.yml"]

  # The Grafana dashboarding server.
  grafana:
    image: grafana/grafana:main
    volumes:
      - "./grafana/definitions:/var/lib/grafana/dashboards"
      - "./grafana/provisioning:/etc/grafana/provisioning"
    ports:
      - "3000:3000"
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=flameGraph traceqlSearch correlations traceQLStreaming metricsSummary traceqlEditor
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true

  # This creates a writeable Tempo data source and a couple of correlations.
  # NOTE: This relies on the Tempo data source not existing at first start, should you delete
  #       the Tempo data source and re-run this service (via a `docker compose up`), extra
  #       copies of correlations will be generated!
  grafana_api_data:
    build: ./curl
    depends_on:
      - grafana

  # A RabbitMQ queue used to send message between the requester and the server microservices.
  mythical-queue:
    image: rabbitmq:management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_running
      interval: 5s
      timeout: 30s
      retries: 10

  # A postgres DB used to store data by the API server microservice.
  mythical-database:
    image: postgres:14.5
    restart: always
    environment:
      POSTGRES_PASSWORD: "mythical"
    volumes:
      - "postgres:/var/lib/postgresql/data"
    ports:
      - "5432:5432"

  # A microservice that makes requests to the API server microservice. Requests are also pushed onto the mythical-queue.
  mythical-requester:
    build:
      context: ./source
      dockerfile: docker/Dockerfile
      args:
        SERVICE: mythical-beasts-requester
    depends_on:
      mythical-queue:
        condition: service_healthy
      mythical-server:
        condition: service_started
    ports:
      - "4001:4001"
    environment:
      - NAMESPACE=production
      - LOGS_TARGET=http://loki:3100/loki/api/v1/push
      - TRACING_COLLECTOR_HOST=opentelemetry-collector
      - TRACING_COLLECTOR_PORT=4317
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=ip=1.2.3.4

  # The API server microservice.
  # It writes logs directly to the Loki service, exposes metrics for the Prometheus
  # service and sends traces to the Grafana opentelemetry-collector instance.
  mythical-server:
    build:
      context: ./source
      dockerfile: docker/Dockerfile
      args:
        SERVICE: mythical-beasts-server
    ports:
      - "4000:4000"
      - "80:80"
    depends_on:
      - mythical-database
    environment:
      - NAMESPACE=production
      - LOGS_TARGET=http://loki:3100/loki/api/v1/push
      - TRACING_COLLECTOR_HOST=opentelemetry-collector
      - TRACING_COLLECTOR_PORT=4317
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=ip=1.2.3.5

  # A microservice that consumes requests from the mythical-queue
  mythical-recorder:
    build:
      context: ./source
      dockerfile: docker/Dockerfile
      args:
        SERVICE: mythical-beasts-recorder
    depends_on:
      mythical-queue:
        condition: service_healthy
    ports:
      - "4002:4002"
    environment:
      - NAMESPACE=production
      - LOGS_TARGET=http://loki:3100/loki/api/v1/push
      - TRACING_COLLECTOR_HOST=opentelemetry-collector
      - TRACING_COLLECTOR_PORT=4317
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=ip=1.2.3.5

  # The Tempo service stores traces send to it by Grafana opentelemetry-collector, and takes
  # queries from Grafana to visualise those traces.
  tempo:
    image: grafana/tempo:2.2.0
    ports:
      - "3200:3200"
      - "4317:4317"
      - "55680:55680"
      - "55681:55681"
      - "14250:14250"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - "./tempo/tempo.yaml:/etc/tempo.yaml"

  # The Loki service stores logs sent to it, and takes queries from Grafana
  # to visualise those logs.
  loki:
    image: grafana/loki:2.8.3
    ports:
      - "3100:3100"

  mimir:
    image: grafana/mimir:2.9.0
    command: ["-ingester.native-histograms-ingestion-enabled=true", "-config.file=/etc/mimir.yaml"]
    ports:
      - "9009:9009"
    volumes:
      - "./mimir/mimir.yaml:/etc/mimir.yaml"

  k6:
    image: grafana/k6
    volumes:
      - "./k6:/scripts"
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://mimir:9009/api/v1/push
      - K6_DURATION=3600s
      - K6_VUS=1
      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
    restart: always
    command: ["run", "-o", "experimental-prometheus-rw", "/scripts/mythical-loadtest.js"]

  pyroscope:
    image: grafana/pyroscope:latest
    ports:
      - "4040:4040"
    volumes:
      - "./pyroscope/pyroscope.yaml:/etc/pyroscope/server.yml"
    command: ["server"]
